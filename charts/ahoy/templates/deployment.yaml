apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ahoy-server
  name: ahoy-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ahoy-server
  template:
    metadata:
      labels:
        app: ahoy-server
    spec:
      {{- if .Values.ahoy.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.ahoy.image.pullSecret }}
      {{- end }}
      serviceAccountName: ahoy
      volumes:
        - name: properties-prod
          configMap:
            name: ahoy-properties-prod
      {{- if or .Values.postgresql.enabled .Values.extraInitContainers }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: pgchecker
          image: "{{ .Values.pgchecker.image.repository }}:{{ .Values.pgchecker.image.tag }}"
          imagePullPolicy: {{ .Values.pgchecker.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.pgchecker.securityContext | nindent 12 }}
          command:
            - sh
            - -c
            - |
              echo 'Waiting for PostgreSQL to become ready...'

              until printf "." && nc -z -w 2 {{ include "ahoy.postgresql.fullname" . }} {{ .Values.postgresql.service.port }}; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK âœ“'
          resources:
            {{- toYaml .Values.pgchecker.resources | nindent 12 }}
        {{- end }}
        {{- with .Values.extraInitContainers }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - image: {{ .Values.ahoy.image.repository }}:{{ .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.ahoy.image.pullPolicy }}
          name: ahoy-server
          env:
            {{- with .Values.ahoy.env }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: properties-prod
              mountPath: "/tmp/config"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources: {}
