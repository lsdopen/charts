# Values for Openshift Container Platform setup
ahoy:
  host: ahoy.apps-crc.testing
  clusterType: openshift

  image:
    repository: lsdopen/ahoy
    pullPolicy: Always
    pullSecret: ""

  auth:
    clientId: ahoy
    redirectUri: http://ahoy.apps-crc.testing/
    issuer: https://keycloak.apps-crc.testing/auth/realms/Ahoy
    jwkSetUri: http://ahoy-keycloak-http.ahoy.svc/auth/realms/Ahoy/protocol/openid-connect/certs
    accountUri: https://keycloak.apps-crc.testing/auth/realms/Ahoy/account/?referrer=ahoy

  env: ""
    # - name: SPRING_PROFILES
    #   value: prod,keycloak

  sealedSecrets:
    controllerName: ahoy-sealed-secrets
    controllerNamespace: ahoy

postgresql:
  enabled: true

  ## PostgreSQL user (has superuser privileges if username is `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlUsername: postgres

  ## PostgreSQL password
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  postgresqlPassword: ahoy123456

  ## Create a database
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  ##
  postgresqlDatabase: ahoy

pgchecker:
  image:
    # Docker image used to check Postgresql readiness at startup
    repository: docker.io/busybox
    # Image tag for the pgchecker image
    tag: 1.32
    # Image pull policy for the pgchecker image
    pullPolicy: IfNotPresent
  # SecurityContext for the pgchecker container
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  # Resource requests and limits for the pgchecker container
  resources:
    requests:
      cpu: "20m"
      memory: "32Mi"
    limits:
      cpu: "20m"
      memory: "32Mi"

keycloak:
  install: true

  # Indicates whether information about services should be injected into Pod's environment variables, matching the syntax of Docker links
  enableServiceLinks: false

  # Additional environment variables for Keycloak
  extraEnv: |
    - name: KEYCLOAK_IMPORT
      value: /tmp/ahoy/ahoy-realm.json
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: admin
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"

  # Add additional volumes, e. g. for custom themes
  extraVolumes: |
    - name: ahoy-realm
      configMap:
        name: ahoy-keycloak-realm

  # Add additional volumes mounts, e. g. for custom themes
  extraVolumeMounts: |
    - name: ahoy-realm
      mountPath: "/tmp/ahoy"

  route:
    # If `true`, an OpenShift Route is created
    enabled: true
    # Path for the Route
    path: /
    # Route annotations
    annotations: {}
    # Additional Route labels
    labels: {}
    # Host name for the Route
    host: "keycloak.apps-crc.testing"
    # TLS configuration
    tls:
      # If `true`, TLS is enabled for the Route
      enabled: true
      # Insecure edge termination policy of the Route. Can be `None`, `Redirect`, or `Allow`
      insecureEdgeTerminationPolicy: Redirect
      # TLS termination of the route. Can be `edge`, `passthrough`, or `reencrypt`
      termination: edge

  postgresql:
    nameOverride: keycloak-postgresql

    # If `true`, the Postgresql dependency is enabled
    enabled: true
    # PostgreSQL User to create
    postgresqlUsername: keycloak
    # PostgreSQL Password for the new user
    postgresqlPassword: keycloak
    # PostgreSQL Database to create
    postgresqlDatabase: keycloak
    # Persistent Volume Storage configuration

argo-cd:
  install: true

  ## ArgoCD configuration
  ## Ref: https://github.com/argoproj/argo-cd
  ##
  nameOverride: argocd
  fullnameOverride: ""
  kubeVersionOverride: ""

  server:
    # -- Additional command line arguments to pass to Argo CD server
    extraArgs:
    #  - --insecure

    # Create a OpenShift Route with SSL passthrough for UI and CLI
    # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain
    # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:
    # If 'hostname' is an empty string "" OpenShift will create a hostname for you.
    route:
      # -- Enable a OpenShift route for the Argo CD server
      enabled: true
      # -- Hostname of OpenShift route
      hostname: "argocd.apps-crc.testing"

    # -- [General Argo CD configuration]
    # @default -- See [values.yaml]
    config:
      accounts.ahoy: apiKey,login

    # -- ArgoCD rbac config ([ArgoCD RBAC policy])
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
    rbacConfig:
      policy.csv: g, ahoy, role:admin

  openshift:
    # -- enables using arbitrary uid for argo repo server
    enabled: true

sealed-secrets:
  install: true

  commandArgs:
    - --update-status

  securityContext:
    # securityContext.runAsUser defines under which user the operator Pod and its containers/processes run.
    runAsUser: ""
    # securityContext.fsGroup defines the filesystem group
    fsGroup: ""
