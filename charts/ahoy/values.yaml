ahoy:
  host: ahoy.minikube.host
  clusterType: kubernetes

  image:
    repository: lsdopen/ahoy
    pullPolicy: Always
    pullSecret: ""

  auth:
    clientId: ahoy
    redirectUri: http://ahoy.minikube.host/
    issuer: https://keycloak.minikube.host/auth/realms/Ahoy
    jwkSetUri: http://ahoy-keycloak-http.ahoy.svc/auth/realms/Ahoy/protocol/openid-connect/certs
    accountUri: https://keycloak.minikube.host/auth/realms/Ahoy/account/?referrer=ahoy

  env: ""
    # - name: SPRING_PROFILES
    #   value: prod,keycloak

  sealedSecrets:
    controllerName: ahoy-sealed-secrets
    controllerNamespace: ahoy

postgresql:
  enabled: true

  ## PostgreSQL user (has superuser privileges if username is `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  postgresqlUsername: postgres

  ## PostgreSQL password
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  postgresqlPassword: ahoy123456

  ## Create a database
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  ##
  postgresqlDatabase: ahoy

pgchecker:
  image:
    # Docker image used to check Postgresql readiness at startup
    repository: docker.io/busybox
    # Image tag for the pgchecker image
    tag: 1.32
    # Image pull policy for the pgchecker image
    pullPolicy: IfNotPresent
  # SecurityContext for the pgchecker container
  securityContext:
    allowPrivilegeEscalation: false
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
  # Resource requests and limits for the pgchecker container
  resources:
    requests:
      cpu: "20m"
      memory: "32Mi"
    limits:
      cpu: "20m"
      memory: "32Mi"

keycloak:
  install: true

  # Additional environment variables for Keycloak
  extraEnv: |
    - name: KEYCLOAK_IMPORT
      value: /tmp/ahoy/ahoy-realm.json
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: admin
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"

  # Add additional volumes, e. g. for custom themes
  extraVolumes: |
    - name: ahoy-realm
      configMap:
        name: ahoy-keycloak-realm

  # Add additional volumes mounts, e. g. for custom themes
  extraVolumeMounts: |
    - name: ahoy-realm
      mountPath: "/tmp/ahoy"

  service:
    # The Service type
    type: NodePort

  ingress:
    # If `true`, an Ingress is created
    enabled: true
    # The Service port targeted by the Ingress
    servicePort: http
    # Ingress annotations
    annotations: { }
    # Additional Ingress labels
    labels: { }
    # List of rules for the Ingress
    rules:
      - # Ingress host
        host: 'keycloak.minikube.host'
        # Paths for the host
        paths:
          - path: /
            pathType: Prefix
    # TLS configuration
    tls:
      - hosts:
          - keycloak.minikube.host
        secretName: keycloak-tls

  postgresql:
    nameOverride: keycloak-postgresql

    # If `true`, the Postgresql dependency is enabled
    enabled: true
    # PostgreSQL User to create
    postgresqlUsername: keycloak
    # PostgreSQL Password for the new user
    postgresqlPassword: keycloak
    # PostgreSQL Database to create
    postgresqlDatabase: keycloak
    # Persistent Volume Storage configuration

argo-cd:
  install: true

  ## ArgoCD configuration
  ## Ref: https://github.com/argoproj/argo-cd
  ##
  nameOverride: argocd
  fullnameOverride: ""
  kubeVersionOverride: ""

  server:
    extraArgs:
      - --insecure

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"

      labels: { }
      ingressClassName: ""

      hosts:
        - argocd.minikube.host
      paths:
        [ ]
      extraPaths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: ahoy-argocd-server
              port:
                name: http
      tls:
        [ ]
      https: false

    config:
      accounts.ahoy: apiKey,login

    rbacConfig:
      policy.csv: g, ahoy, role:admin

sealed-secrets:
  install: true

  commandArgs:
    - --update-status
